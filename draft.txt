Psuedocode evaluation / logic draft

PLEASE NOTE, this is NOT an explanation of how it works. This file is mostly a scratchpad for myself


---

note: x and y are relative to the current token. So if you are at token 3 and MARK(-1 1) it marks tokens 2 through 4
using gn (eg g2) means token at index 2, not relative to current token.

MARK(x y)       mark tokens in range x through y as solved (tokens marked as solved are ignored)
SET(x = k)      set value of token x to value k (also sets type to tkType::number)
SOLVE(x TYPE y) performs operator TYPE (eg * + - ...) on tokens x and y, returns the result
SELF()          pseudo only .. evaluates tkContents, returns value of last token
WARN()          pseudo only .. warns that an expression is ambiguous (eg divsion w/o EOF or parentheses)

order of operations will be applied ofc

The solved value should be stored in the last token of the operator,
    the token containing the value should be set and not marked as solved.
    it should also be the last token in the operation.

Tokens marked as solved are ignored, so eg if you have
    3 * [solved] 7
    and are at token 2 (*), SET(1 = 0)
    sets token g3 instead, because token g2 is marked solved.
        picking a token is always continued in the same direction, relative to the current token
        eg SET(-1 =) will always go left, and SET(1 =) will always go right
    3 + [solved] * 7
    is an error (equivalent to 3+*7) and should never happen.

example logic

3
*   MARK(-1 0); SET(1 = SOLVE(-1 * 1));
3
x   MARK(-1 -1); SET(0 = SOLVE(-1 * 0));
(   SET(0 = SELF()); MARK(-1 -1); SET(0 = SOLVE(-1 * 0));
   9   
   /    MARK(-1 0); SET(1 = SOLVE(-1 / 1)); WARN(Ambiguous division)
   x
   ^    MARK(-1 0); SET(1 = SOLVE(-1 ^ 1)); WARN(Ambiguous exponent)
   2
   +    MARK(-1 0); SET(1 = SOLVE(-1 + 1));
   3
)